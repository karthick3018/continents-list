{"version":3,"sources":["common/helper.tsx","graphql/query/continents.tsx","components/loader/index.tsx","components/continentList/index.tsx","components/continentDetails/continents.jpeg","components/continentDetails/index.tsx","components/index.tsx","reportWebVitals.ts","index.tsx"],"names":["COLORS","FETCH_CONTINENTS","gql","FETCH_SINGLE_CONTINENT_DETAILS","Loader","className","ContinentList","continentList","handleContinentClick","isLoading","map","eachContinent","Math","floor","random","length","onClick","code","name","React","memo","customStyles","content","top","left","right","bottom","marginRight","transform","ContinentDetails","isModalOpen","onModalClose","details","isOpen","onRequestClose","style","contentLabel","src","ContinentImage","alt","countries","Components","useQuery","graphql","loading","error","data","useLazyQuery","getContinentDetails","detailsLoading","detailsData","useState","setIsModalOpen","continents","variables","continent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.f1650d18.chunk.js","sourcesContent":["export const END_POINT = \"https://countries.trevorblades.com/\";\n\nexport const COLORS = [\"blue\", \"orange\", \"ocean\"];","import { gql } from \"@apollo/client\";\n\nexport const FETCH_CONTINENTS = gql`\n  query Continents {\n    continents {\n      code\n      name\n    }\n  }\n`;\n\nexport const FETCH_SINGLE_CONTINENT_DETAILS = gql`\n  query Continent($code: ID!) {\n    continent(code: $code) {\n      name\n      code\n      countries {\n        code\n        capital\n        currency\n      }\n    }\n  }\n`;\n","import './index.css';\n\nconst Loader = () => (\n  <div className=\"loader\"></div>\n)\n\nexport default Loader;","import React from 'react';\nimport Loader from '../loader';\nimport {COLORS} from '../../common/helper';\nimport './index.css'\n\ntype TContinentListItems = {\n  code: string;\n  name: string;\n};\n\ntype TContinentListProps = {\n  continentList: TContinentListItems[];\n  handleContinentClick: (code: string) => void;\n  isLoading: boolean;\n};\n\n\nconst ContinentList= ({\n  continentList,\n  handleContinentClick,\n  isLoading\n}: TContinentListProps) => {\n  return (\n    <>\n      {!isLoading ? continentList?.map((eachContinent: TContinentListItems) => {\n        return (\n          <li\n            className={`list-wrapper ${\n              COLORS[Math.floor(Math.random() * COLORS?.length)]\n            }\n            `}\n            key={eachContinent?.code}\n            onClick={() => handleContinentClick(eachContinent?.code)}\n          >\n            <p className=\"name\">{eachContinent?.name}</p>\n            <p className=\"code\">{eachContinent?.code}</p>\n          </li>\n        );\n      }):<Loader/>}\n    </>\n  );\n};\n\nexport default React.memo(ContinentList);","export default __webpack_public_path__ + \"static/media/continents.43fbb689.jpeg\";","import React from 'react';\nimport Modal from 'react-modal';\nimport Loader from '../loader';\nimport ContinentImage from './continents.jpeg'\nimport './index.css';\n\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\ntype TContinentDetailsProps = {\n  details: {\n    name: string;\n    code: string;\n    countries: [];\n  };\n  isModalOpen: boolean;\n  isLoading: boolean;\n  onModalClose: () => void;\n};\n\nconst ContinentDetails = ({\n  isModalOpen,\n  onModalClose,\n  details,\n  isLoading\n}: TContinentDetailsProps) => {\n  return (\n    <>\n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={onModalClose}\n        style={customStyles}\n        contentLabel=\"details-modal\"\n      >\n        <div className=\"modal-content\">\n          <figure className=\"modal-figure\">\n            <img src={ContinentImage} alt=\"continents\" />\n          </figure>\n          {!isLoading ?\n            <>\n            <h3>About {details?.name}</h3>\n            <hr/>\n            <p className=\"details\">\n              <span className=\"bold\">{details?.name}</span> is one of the\n              beautiful continent. It is probably know using it's code{\" \"}\n              <span className=\"bold\">{details?.code}.</span> And it has about{\" \"}\n              <span className=\"bold\">{details?.countries?.length}</span>{\" \"}\n              countries, each country has it's own capital and currency.\n            </p>\n          </>:<Loader/>}\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContinentDetails;","import React,{useState} from 'react';\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport * as graphql  from '../graphql/query/continents';\nimport ContinentList from './continentList';\nimport ContinentDetails from './continentDetails';\nimport './index.css';\n\n\nconst Components:React.FC = () => {\n  const { loading, error, data } = useQuery(graphql?.FETCH_CONTINENTS);\n  const [getContinentDetails, { loading: detailsLoading, data: detailsData }] = useLazyQuery(\n    graphql?.FETCH_SINGLE_CONTINENT_DETAILS\n  );\n  const [isModalOpen,setIsModalOpen] = useState<boolean>(false);\n\n\n  const handleContinentClick = (code: string) => {\n     getContinentDetails({ variables: { code } });\n     setIsModalOpen(true);\n  }  \n\n  const handleModalClose = () => {\n    setIsModalOpen(false)\n  }\n\n \n  return (\n    <div className=\"container\">\n      <ContinentList\n        continentList={data?.continents}\n        handleContinentClick={handleContinentClick}\n        isLoading={loading}\n      />\n      <ContinentDetails\n        details={detailsData?.continent}\n        isModalOpen={isModalOpen}\n        onModalClose={handleModalClose}\n        isLoading={detailsLoading}\n      />\n      {error && <p>something seems wrong ! more info: {error}</p>}\n    </div>\n  );\n}\n\nexport default Components;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client/react\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { END_POINT } from \"./common/helper\";\nimport Components from \"./components\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nconst client = new ApolloClient({\n  uri: END_POINT,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Components />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}