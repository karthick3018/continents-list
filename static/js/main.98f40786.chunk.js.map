{"version":3,"sources":["common/helper.tsx","graphql/query/continents.tsx","components/loader/index.tsx","components/continentList/index.tsx","components/continentDetails/continents.jpeg","components/continentDetails/index.tsx","components/index.tsx","reportWebVitals.ts","serviceWorker.js","index.tsx"],"names":["COLORS","FETCH_CONTINENTS","gql","FETCH_SINGLE_CONTINENT_DETAILS","Loader","className","ContinentList","continentList","handleContinentClick","isLoading","map","eachContinent","Math","floor","random","length","onClick","code","name","React","memo","customStyles","content","top","left","right","bottom","marginRight","transform","ContinentDetails","isModalOpen","onModalClose","details","isOpen","onRequestClose","style","contentLabel","ariaHideApp","src","ContinentImage","alt","countries","Components","useQuery","graphql","loading","error","data","useLazyQuery","getContinentDetails","detailsLoading","detailsData","useState","setIsModalOpen","continents","variables","continent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.98f40786.chunk.js","sourcesContent":["export const END_POINT = \"https://countries.trevorblades.com/\";\n\nexport const COLORS = [\"blue\", \"orange\", \"ocean\"];","import { gql } from \"@apollo/client\";\n\nexport const FETCH_CONTINENTS = gql`\n  query Continents {\n    continents {\n      code\n      name\n    }\n  }\n`;\n\nexport const FETCH_SINGLE_CONTINENT_DETAILS = gql`\n  query Continent($code: ID!) {\n    continent(code: $code) {\n      name\n      code\n      countries {\n        code\n        capital\n        currency\n      }\n    }\n  }\n`;\n","import './index.css';\n\nconst Loader = () => (\n  <div className=\"loader\"></div>\n)\n\nexport default Loader;","import React from 'react';\nimport Loader from '../loader';\nimport {COLORS} from '../../common/helper';\nimport './index.css'\n\ntype TContinentListItems = {\n  code: string;\n  name: string;\n};\n\ntype TContinentListProps = {\n  continentList: TContinentListItems[];\n  handleContinentClick: (code: string) => void;\n  isLoading: boolean;\n};\n\n\nconst ContinentList= ({\n  continentList,\n  handleContinentClick,\n  isLoading\n}: TContinentListProps) => {\n  return (\n    <ul>\n      {!isLoading ? (\n        continentList?.map((eachContinent: TContinentListItems) => {\n          return (\n            <li\n              className={`list-wrapper ${\n                COLORS[Math.floor(Math.random() * COLORS?.length)]\n              }\n            `}\n              key={eachContinent?.code}\n              onClick={() => handleContinentClick(eachContinent?.code)}\n            >\n              <p className=\"name\">{eachContinent?.name}</p>\n              <p className=\"code\">{eachContinent?.code}</p>\n            </li>\n          );\n        })\n      ) : (\n        <Loader />\n      )}\n    </ul>\n  );\n};\n\nexport default React.memo(ContinentList);","export default __webpack_public_path__ + \"static/media/continents.43fbb689.jpeg\";","import React from 'react';\nimport Modal from 'react-modal';\nimport Loader from '../loader';\nimport ContinentImage from './continents.jpeg'\nimport './index.css';\n\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n};\n\ntype TContinentDetailsProps = {\n  details: {\n    name: string;\n    code: string;\n    countries: [];\n  };\n  isModalOpen: boolean;\n  isLoading: boolean;\n  onModalClose: () => void;\n};\n\nconst ContinentDetails = ({\n  isModalOpen,\n  onModalClose,\n  details,\n  isLoading\n}: TContinentDetailsProps) => {\n  return (\n    <>\n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={onModalClose}\n        style={customStyles}\n        contentLabel=\"details-modal\"\n        ariaHideApp={false}\n      >\n        <div className=\"modal-content\">\n          <figure className=\"modal-figure\">\n            <img src={ContinentImage} alt=\"continents\" />\n          </figure>\n          {!isLoading ? (\n            <>\n              <h3>About {details?.name}</h3>\n              <hr />\n              <p className=\"details\">\n                <span className=\"bold\">{details?.name}</span> is one of the\n                beautiful continent. It is probably know using it's code{\" \"}\n                <span className=\"bold\">{details?.code}.</span> And it has about{\" \"}\n                <span className=\"bold\">{details?.countries?.length}</span>{\" \"}\n                countries, each country has it's own capital and currency.\n              </p>\n            </>\n          ) : (\n            <Loader />\n          )}\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContinentDetails;","import React,{useState} from 'react';\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport * as graphql  from '../graphql/query/continents';\nimport ContinentList from './continentList';\nimport ContinentDetails from './continentDetails';\nimport './index.css';\n\n\nconst Components:React.FC = () => {\n  const { loading, error, data } = useQuery(graphql?.FETCH_CONTINENTS);\n  const [getContinentDetails, { loading: detailsLoading, data: detailsData }] = useLazyQuery(\n    graphql?.FETCH_SINGLE_CONTINENT_DETAILS\n  );\n  const [isModalOpen,setIsModalOpen] = useState<boolean>(false);\n\n\n  const handleContinentClick = (code: string) => {\n     getContinentDetails({ variables: { code } });\n     setIsModalOpen(true);\n  }  \n\n  const handleModalClose = () => {\n    setIsModalOpen(false)\n  }\n\n \n  return (\n    <div className=\"container\">\n      <ContinentList\n        continentList={data?.continents}\n        handleContinentClick={handleContinentClick}\n        isLoading={loading}\n      />\n      <ContinentDetails\n        details={detailsData?.continent}\n        isModalOpen={isModalOpen}\n        onModalClose={handleModalClose}\n        isLoading={detailsLoading}\n      />\n      {error && <p>something seems wrong ! more info: {error}</p>}\n    </div>\n  );\n}\n\nexport default Components;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/client/react\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport { END_POINT } from \"./common/helper\";\nimport Components from \"./components\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconst client = new ApolloClient({\n  uri: END_POINT,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Components />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.register();\n\n"],"sourceRoot":""}